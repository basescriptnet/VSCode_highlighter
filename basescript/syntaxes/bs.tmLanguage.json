{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "basescript",
    "comment": "Huge thank you to https://github.com/microsoft/vscode/blob/main/extensions/javascript/syntaxes/JavaScript.tmLanguage.json for solving regex problem",
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#booleans"
		},
		{
			"include": "#nulls"
		},
		{
			"include": "#constants"
		},
		{
			"include": "#html"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#types"
		},
		{
			"include": "#numbers"
		},
		{
			"include": "#charliterals"
		},
		{
			"include": "#regex"
		},
		{
			"include": "#templateLiterals"
		},
		{
			"include": "#arrays"
		},
		{
			"include": "#operator"
		},
		{
			"include": "#punctuation"
		},
        {
            "include": "#functions"
        },
		{
			"include": "#properties"
		},
		{
			"include": "#identifier"
		},
		{
			"include": "#variables"
		}
	],
	"repository": {
		"comments": {
			"patterns": [{
				"name": "comment.line",
				"match": "//([^\n]*)"
			}]
		},
		"array": {
			"begin": "\\[",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.array.begin.bs"
				}
			},
			"end": "\\]",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.array.end.bs"
				}
			},
			"name": "meta.structure.array.bs",
			"patterns": [
				{
					"match": ",",
					"name": "punctuation.separator.array.bs"
				},
				{
					"match": "[^\\s\\]]",
					"name": "invalid.illegal.expected-array-separator.bs"
				}
			]
		},
		"keywords": {
			"patterns": [{
				"name": "keyword.control.bs",
				"match": "\\b(interface|print|and|or|THAT|till|from|through|break|case|continue|default|do|return|in|of|BEGIN|END|import|as|when|if|else|unless|for|while|switch|try|catch|finally|is|not)\\b"
			},
            {
                "name": "storage.modifier.bs",
                "match": "@(import|include|dirname|filename|ignore|eval)\\b"
            },
            {
				"name": "keyword.control.bs",
				"match": "#\\b(include)\\b"
			},
			{
				"name": "keyword.control.new.bs",
				"match": "(?<!\\$)\\b(new)\\b(?!\\$)"
			},
			{
				"name": "keyword.declaration.bs",
				"match": "(?<!\\$)\\b(module|operator|swap|defined|safeValue|namespace|free|this|class|type|typeof|sizeof|extends|constructor|super|ASSIGN|SET|TO|INTO)\\b(?!\\$)"
			},
			{
				"name": "keyword.operator.ternary.bs",
				"match": "\\?|:"
			},
			{
				"name": "keyword.operator.assignment.bitwise.bs",
				"match": "((&|\\^|\\||<<|>>>?)=)"
			},
			{
				"name": "keyword.operator.logical.bs",
				"match": "(!|&&|\\|\\|)"
			},
			{
				"name": "keyword.operator.closure.bs",
				"match": "(=>)"
			},
			{
				"name": "keyword.operator.comparison.bs",
				"match": "(===|!==|<=?|>=?|==|!=)"
			},
			{
				"name": "keyword.operator.assignment.bs",
				"match": "(=)"
			},
			{
				"name": "storage.modifier.bs",
				"match": "(?<!\\$)\\b(static|const|let|var)\\b(?!\\$)"
			},
			{
				"name": "storage.type.primitive.bs",
				"match": "(?<!\\$)\\b(?:void)\\b(?!\\$)"
			}
			]
		},
		"punctuation": {
			"patterns": [
				{
					"name": "punctuation.comma.bs",
					"match": ","
				},
				{
					"name": "punctuation.terminator.bs",
					"match": ";"
				},
				{
					"name": "punctuation.dot.bs",
					"match": "\\.\\.\\.|\\.\\.|\\."
				}
			]
		},
		"html": {
			"patterns": [
				{
					"match": "\\<([A-Za-z_$]+[A-Za-z0-9_$]*)(#([A-Za-z_$]+[A-Za-z0-9_$]*))?((.([A-Za-z_$]+[A-Za-z0-9_$]*))*)?\\/>",
					"captures": {
						"1":{
							"name": "constant.language.bs"
						},
						"3": {
							"name": "constant.language.bs"
						},
						"4": {
							"name": "string.language.bs"
						}
					},
					"name": "variable.bs"
				},
				{
					"match": "\\<(?<tagName>[A-Za-z_$]+[A-Za-z0-9_$]*)(?<attributes>(?<attribute>\\s+(?<attribute_name>[A-Za-z_$]+[A-Za-z0-9_$]*)=(?<attribute_value>\"(\\\\[\"nrt]|[^\"])*\"))*)\\s*>",
					"captures": {
						"1":{
							"name": "constant.language.bs"
						},
						"2": {
							"name": "string.language.bs"
						}
					},
					"name": "variable.bs"
				},
				{
					"match": "<\\/([A-Za-z_$]+[A-Za-z0-9_$]*)\\s*>",
					"captures": {
						"1":{
							"name": "constant.language.bs"
						}
					},
					"name": "variable.bs"
				},
				{
					"match": "\\.\\s+[A-Za-z_$]+[A-Za-z0-9_$]*",
					"name": "constant.language.bs"
				}
			]
		},
		"variables": {
			"patterns": [
				{
					"match": "\\$",
					"name": "variable.bs"
				},
				{
					"match": "\\$?\\b[A-Za-z_$]+[A-Za-z0-9_$]*\\b\\$?",
					"name": "variable.bs"
				},
				{
					"match": "\\.\\s+[A-Za-z_$]+[A-Za-z0-9_$]*",
					"name": "constant.language.bs"
				}
			]
		},
        "identifier": {
            "patterns": [
                {
                    "match": "\\.\\s+[A-Za-z_$]+[A-Za-z0-9_$]*",
                    "name": "constant.language.bs"
                },
                {
                    "match": "\\$",
                    "name": "variable.bs"
                },
                {
                    "match": "\\$?\\b[A-Za-z_$]+[A-Za-z0-9_$]*\\b\\$?",
                    "name": "variable.bs"
                }
            ]
        },
        "operator": {
            "match": "-|\\+|\\/|\\*|%|=|\\.\\.\\.?",
			"name": "keyword.operator.bs"
        },
		"numbers": {
			"name": "constant.numeric.bs",
			"patterns": [
				{
					"name": "constant.numeric.dec.bs",
					"match": "\\b[0-9]+(_?[0-9]+)*\\.[0-9]+"
				},
				{
					"name": "constant.numeric.dec.bs",
					"match": "\\b[0-9]+(_?[0-9]+)*n?"
				}
			]
		},
        "functions": {
            "patterns": [
                {
                    "match": "\\b([A-Za-z_$]+[A-Za-z0-9_$]*)\\s*\\(",
                    "captures": {
                        "1": {
                            "name": "entity.name.function.bs"
                        }
                    }
                }
            ]
        },
        "regex": {
            "patterns": [
				{
					"name": "string.regexp.bs",
					"begin": "(?<!\\+\\+|--|})(?<=[=(:,\\[?+!]|^return|[^\\._$[:alnum:]]return|^case|[^\\._$[:alnum:]]case|=>|&&|\\|\\||\\*\\/)\\s*(\\/)(?![\\/*])(?=(?:[^\\/\\\\\\[\\()]|\\\\.|\\[([^\\]\\\\]|\\\\.)+\\]|\\(([^\\)\\\\]|\\\\.)+\\))+\\/([dgimsuy]+|(?![\\/\\*])|(?=\\/\\*))(?!\\s*[a-zA-Z0-9_$]))",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.string.begin.bs"
						}
					},
					"end": "(/)([dgimsuy]*)",
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.string.end.bs"
						},
						"2": {
							"name": "keyword.other.bs"
						}
					},
					"patterns": [
						{
							"include": "#regexp"
						}
					]
				},
				{
					"name": "string.regexp.bs",
					"begin": "((?<![_$[:alnum:])\\]]|\\+\\+|--|}|\\*\\/)|((?<=^return|[^\\._$[:alnum:]]return|^case|[^\\._$[:alnum:]]case))\\s*)\\/(?![\\/*])(?=(?:[^\\/\\\\\\[]|\\\\.|\\[([^\\]\\\\]|\\\\.)*\\])+\\/([dgimsuy]+|(?![\\/\\*])|(?=\\/\\*))(?!\\s*[a-zA-Z0-9_$]))",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.bs"
						}
					},
					"end": "(/)([dgimsuy]*)",
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.string.end.bs"
						},
						"2": {
							"name": "keyword.other.bs"
						}
					},
					"patterns": [
						{
							"include": "#regexp"
						}
					]
				}
			]
        },
        "regexp": {
			"patterns": [
				{
					"name": "keyword.control.anchor.regexp",
					"match": "\\\\[bB]|\\^|\\$"
				},
				{
					"match": "\\\\[1-9]\\d*|\\\\k<([a-zA-Z_$][\\w$]*)>",
					"captures": {
						"0": {
							"name": "keyword.other.back-reference.regexp"
						},
						"1": {
							"name": "variable.other.regexp"
						}
					}
				},
				{
					"name": "keyword.operator.quantifier.regexp",
					"match": "[?+*]|\\{(\\d+,\\d+|\\d+,|,\\d+|\\d+)\\}\\??"
				},
				{
					"name": "keyword.operator.or.regexp",
					"match": "\\|"
				},
				{
					"name": "meta.group.assertion.regexp",
					"begin": "(\\()((\\?=)|(\\?!)|(\\?<=)|(\\?<!))",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.group.regexp"
						},
						"2": {
							"name": "punctuation.definition.group.assertion.regexp"
						},
						"3": {
							"name": "meta.assertion.look-ahead.regexp"
						},
						"4": {
							"name": "meta.assertion.negative-look-ahead.regexp"
						},
						"5": {
							"name": "meta.assertion.look-behind.regexp"
						},
						"6": {
							"name": "meta.assertion.negative-look-behind.regexp"
						}
					},
					"end": "(\\))",
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.group.regexp"
						}
					},
					"patterns": [
						{
							"include": "#regexp"
						}
					]
				},
				{
					"name": "meta.group.regexp",
					"begin": "\\((?:(\\?:)|(?:\\?<([a-zA-Z_$][\\w$]*)>))?",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.group.regexp"
						},
						"1": {
							"name": "punctuation.definition.group.no-capture.regexp"
						},
						"2": {
							"name": "variable.other.regexp"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.group.regexp"
						}
					},
					"patterns": [
						{
							"include": "#regexp"
						}
					]
				},
				{
					"name": "constant.other.character-class.set.regexp",
					"begin": "(\\[)(\\^)?",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.character-class.regexp"
						},
						"2": {
							"name": "keyword.operator.negation.regexp"
						}
					},
					"end": "(\\])",
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.character-class.regexp"
						}
					},
					"patterns": [
						{
							"name": "constant.other.character-class.range.regexp",
							"match": "(?:.|(\\\\(?:[0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}))|(\\\\c[A-Z])|(\\\\.))\\-(?:[^\\]\\\\]|(\\\\(?:[0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}))|(\\\\c[A-Z])|(\\\\.))",
							"captures": {
								"1": {
									"name": "constant.character.numeric.regexp"
								},
								"2": {
									"name": "constant.character.control.regexp"
								},
								"3": {
									"name": "constant.character.escape.backslash.regexp"
								},
								"4": {
									"name": "constant.character.numeric.regexp"
								},
								"5": {
									"name": "constant.character.control.regexp"
								},
								"6": {
									"name": "constant.character.escape.backslash.regexp"
								}
							}
						},
						{
							"include": "#regex-character-class"
						}
					]
				},
				{
					"include": "#regex-character-class"
				}
			]
		},
		"regex-character-class": {
			"patterns": [
				{
					"name": "constant.other.character-class.regexp",
					"match": "\\\\[wWsSdDtrnvf]|\\."
				},
				{
					"name": "constant.character.numeric.regexp",
					"match": "\\\\([0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4})"
				},
				{
					"name": "constant.character.control.regexp",
					"match": "\\\\c[A-Z]"
				},
				{
					"name": "constant.character.escape.backslash.regexp",
					"match": "\\\\."
				}
			]
		},
		"booleans": {
			"name": "constants.bs",
			"patterns": [
				{
					"name": "constant.language.bs",
					"match": "\\b(true|false)\\b"
				}
			]
		},
        "constants": {
            "match": "\\b(debugger|undefined|null|def|function|SAVE|DELETE|delete|LOG|ERROR|WRITE|PUSH|POP|SHIFT|UNSHIFT|FROM|INTO)\\b",
            "name": "constant.language.bs"
        },
		"types":{
			"name": "entity.name.type.bs",
			"match": "\\b(Int|Number|String|Float|NaN|Object|Array|HTML|Symbol|Function|[A-Z]+[A-Za-z_$]*)\\b"
		},
		"properties": {
			"name": "property.bs",
			"patterns": [
				{
					"name": "entity.name.function.bs",
					"match": "\\.\\s*[A-Za-z_$]+[A-Za-z_0-9$]*"
				}
			]
		},
		"strings": {
			"name": "string.quoted.double.bs",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.bs",
					"match": "\\\\."
				}
			]
		},
		"charliterals": {
			"name": "string.quoted.single.bs",
			"begin": "'",
			"end": "'",
			"patterns": [
				{
					"name": "constant.character.escape.bs",
					"match": "\\\\."
				}
			]
		},
		"templateLiterals": {
			"name": "string.quoted.single.bs",
			"begin": "`",
			"end": "`",
			"patterns": [
                {
                    "name": "constant.character.escape.bs",
                    "match": "\\\\\\$"
                },
                {
                    "name": "variable.language",
                    "begin": "\\$\\{",
                    "end": "\\}",
                    "patterns": [
                        {
                            "include": "#identifier"
                        },
                        {
                            "include": "#operator"
                        },
                        {
                            "include": "#numbers"
                        },
                        {
                            "include": "#functions"
                        },
                        {
                            "include": "#regex"
                        },
                        {
                            "include": "#booleans"
                        },
                        {
                            "include": "#constants"
                        },
                        {
                            "include": "#types"
                        },
                        {
                            "include": "#properties"
                        },
                        {
                            "include": "#strings"
                        },
                        {
                            "include": "#charliterals"
                        },
                        {
                            "include": "#templateLiterals"
                        },
                        {
                            "include": "#comments"
                        }
                    ]
                }
			]
		}
	},
	"object": {
		"begin": "\\{",
		"beginCaptures": {
			"0": {
				"name": "punctuation.definition.dictionary.begin.bs"
			}
		},
		"end": "\\}",
		"endCaptures": {
			"0": {
				"name": "punctuation.definition.dictionary.end.bs"
			}
		},
		"name": "meta.structure.dictionary.bs",
		"patterns": [
			{
				"comment": "the bsON object key",
				"include": "#objectkey"
			},
			{
				"include": "#comments"
			},
			{
				"begin": ":",
				"beginCaptures": {
					"0": {
						"name": "punctuation.separator.dictionary.key-value.bs"
					}
				},
				"end": "(,)|(?=\\})",
				"endCaptures": {
					"1": {
						"name": "punctuation.separator.dictionary.pair.bs"
					}
				},
				"name": "meta.structure.dictionary.value.bs",
				"patterns": [
					{
						"comment": "the bsON object value",
						"include": "#value"
					},
					{
						"match": "[^\\s,]",
						"name": "invalid.illegal.expected-dictionary-separator.bs"
					}
				]
			},
			{
				"match": "[^\\s\\}]",
				"name": "invalid.illegal.expected-dictionary-separator.bs"
			}
		]
	},
	"scopeName": "source.bs"
}
